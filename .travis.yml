# Generic .travis.yml file for running continuous integration on Travis-CI for
# any ROS package.
#
# Available here:
#   - http://felixduvallet.github.io/ros-travis-integration
#   - https://github.com/felixduvallet/ros-travis-integration
#
# This installs ROS on a clean Travis-CI virtual machine, creates a ROS
# workspace, resolves all listed dependencies, and sets environment variables
# (setup.bash). Then, it compiles the entire ROS workspace (ensuring there are
# no compilation errors), and runs all the tests. If any of the compilation/test
# phases fail, the build is marked as a failure.
#
# We handle two types of package dependencies specified in the package manifest:
#   - system dependencies that can be installed using `rosdep`, including other
#     ROS packages and system libraries. These dependencies must be known to
#     `rosdistro` and get installed using apt-get.
#   - package dependencies that must be checked out from source. These are handled by
#     `wstool`, and should be listed in a file named dependencies.rosinstall.
#
# There are two variables you may want to change:
#   - ROS_DISTRO (default is indigo). Note that packages must be available for
#     ubuntu 14.04 trusty.
#   - ROSINSTALL_FILE (default is dependencies.rosinstall inside the repo
#     root). This should list all necessary repositories in wstool format (see
#     the ros wiki). If the file does not exists then nothing happens.
#
# See the README.md for more information.
#
# Author: Felix Duvallet <felixd@gmail.com>

# NOTE: The build lifecycle on Travis.ci is something like this:
#    before_install
#    install
#    before_script
#    script
#    after_success or after_failure
#    after_script
#    OPTIONAL before_deploy
#    OPTIONAL deploy
#    OPTIONAL after_deploy

################################################################################

# Use ubuntu trusty (14.04) with sudo privileges.
dist: trusty
sudo: required
language:
  - generic
cache:
  - apt

# Configuration variables. All variables are global now, but this can be used to
# trigger a build matrix for different ROS distributions if desired.
env:
<<<<<<< HEAD
  matrix:
    - ROS_DISTRO="indigo" ROS_REPOSITORY_PATH=http://packages.ros.org/ros/ubuntu NOT_TEST_BUILD=true NOT_TEST_INSTALL=true
    - ROS_DISTRO="indigo" ROS_REPOSITORY_PATH=http://packages.ros.org/ros-shadow-fixed/ubuntu NOT_TEST_BUILD=true NOT_TEST_INSTALL=true
    - ROS_DISTRO="indigo" PRERELEASE=true
    - ROS_DISTRO="jade"   ROS_REPOSITORY_PATH=http://packages.ros.org/ros/ubuntu NOT_TEST_BUILD=true NOT_TEST_INSTALL=true
    - ROS_DISTRO="jade"   ROS_REPOSITORY_PATH=http://packages.ros.org/ros-shadow-fixed/ubuntu NOT_TEST_BUILD=true NOT_TEST_INSTALL=true
    - ROS_DISTRO="jade"   PRERELEASE=true
    - ROS_DISTRO="kinetic"  ROS_REPOSITORY_PATH=http://packages.ros.org/ros/ubuntu NOT_TEST_BUILD=true NOT_TEST_INSTALL=true
    - ROS_DISTRO="kinetic"  ROS_REPOSITORY_PATH=http://packages.ros.org/ros-shadow-fixed/ubuntu NOT_TEST_BUILD=true NOT_TEST_INSTALL=true
    - ROS_DISTRO="kinetic"  PRERELEASE=true
    - ROS_DISTRO="melodic"  ROS_REPOSITORY_PATH=http://packages.ros.org/ros/ubuntu NOT_TEST_BUILD=true NOT_TEST_INSTALL=true
    - ROS_DISTRO="melodic"  ROS_REPOSITORY_PATH=http://packages.ros.org/ros-shadow-fixed/ubuntu NOT_TEST_BUILD=true NOT_TEST_INSTALL=true
    - ROS_DISTRO="melodic"  PRERELEASE=true
matrix:
  allow_failures:
    - env: ROS_DISTRO="indigo" PRERELEASE=true  # Run docker-based ROS prerelease test http://wiki.ros.org/bloom/Tutorials/PrereleaseTest Because we might not want to run prerelease test for all PRs, it's omitted from pass-fail criteria.
    - env: ROS_DISTRO="jade"   ROS_REPOSITORY_PATH=http://packages.ros.org/ros/ubuntu NOT_TEST_BUILD=true NOT_TEST_INSTALL=true
    - env: ROS_DISTRO="jade"   ROS_REPOSITORY_PATH=http://packages.ros.org/ros-shadow-fixed/ubuntu NOT_TEST_BUILD=true NOT_TEST_INSTALL=true
    - env: ROS_DISTRO="jade"   PRERELEASE=true
    - env: ROS_DISTRO="kinetic"  PRERELEASE=true
    - env: ROS_DISTRO="melodic"  PRERELEASE=true
=======
  global:
    - ROS_DISTRO=indigo
    - ROS_CI_DESKTOP="`lsb_release -cs`"  # e.g. [precise|trusty|...]
    - CI_SOURCE_PATH=$(pwd)
    - ROSINSTALL_FILE=$CI_SOURCE_PATH/dependencies.rosinstall
    - CATKIN_OPTIONS=$CI_SOURCE_PATH/catkin.options
    - ROS_PARALLEL_JOBS='-j8 -l6'
    # Set the python path manually to include /usr/-/python2.7/dist-packages
    # as this is where apt-get installs python packages.
    - PYTHONPATH=$PYTHONPATH:/usr/lib/python2.7/dist-packages:/usr/local/lib/python2.7/dist-packages
    - LEAP_SDK=~/leap
    - TRAVIS_PULL_REQUEST="false"
    - INCLUDE_URL_FILENAME=unenc_include_urls.txt
    - LIB_URL_FILENAME=unenc_lib_x64_urls.txt
    - SDK_LOC=
        secure: "HRNZ1Po0jugtywHMDgarq1pBvQ1RwWLi3Mrecx5wvQg3EgAoQogt5DFbdiTIKxMPHD0/ZAGwxhQJZRSAY/hoeWMuO3ICy7goEGLpq3KnU/TaQBtf02yEBShrGW5B6eVMsvUc4b5JGFme3QTEzXCeo4mzrywbCZIZtldZHmYu0mZGt6oqhD2jvSuPQgSJiX1Q3rAMrsKIGvPqlr7zdLoE/d0af95tg51d26BOjusQrEmUOPY3ADnGb7MvkHnsXWVxkNANZ8DG4ycbKnWGjACMap1pQtapdOxQrBkFL9sSIQH3Co6a9OsU17G75OpFTU8fPUfDkFNRofpItfj7izDpJ5AXL9MCeaK6NyDgHDFoh2/R4hgoTJv9stkdJYVsRH5MdfzY9ob1qTl7a5rTKWmb8Z2qg02gOb9BVQ1BwdeHS+5PcxM1k4M7vy3SlIRpoGh8Y6NmP0ecvrrZQL+iXLmnFa+9o4SDhEImmNgxvJwyYVFbeXlASCFM2kdvBG4b1RiW9t1iKKFclm1TKqDinANrzAbglza1ze4BOk75wP4bXHq+r2snvtRn3fu3FQ1PgMOIyiQGazWZtK7GB7ge/ZCc5SIogGOP2otACzjAdBr140cr4AgSWfT4C2yXke95Yy4JezEle++dDhljn8/Maub2E6PP5c64lRDC9aHq/ABHF3o="
##############################################################################

# Install system dependencies, namely a very barebones ROS setup.
before_install:
    # Decrypt files that are within the repository
  - 'if [ "$TRAVIS_PULL_REQUEST" = "false" ]; then
        openssl aes-256-cbc -K $encrypted_030e98bcd2a4_key -iv $encrypted_030e98bcd2a4_iv -in github_deploy_key_travis.enc -out github_deploy_key_travis -d;
        chmod 600 github_deploy_key_travis;
        eval $(ssh-agent -s);
        ssh-add github_deploy_key_travis;
    fi'
  
  # ROS setup
  - sudo sh -c "echo \"deb http://packages.ros.org/ros/ubuntu $ROS_CI_DESKTOP main\" > /etc/apt/sources.list.d/ros-latest.list"
  - sudo apt-key adv --keyserver hkp://ha.pool.sks-keyservers.net:80 --recv-key 421C365BD9FF1F717815A3895523BAEEB01FA116
  - sudo apt-get update -qq
  - sudo apt-get install -y python-catkin-pkg python-rosdep python-wstool ros-$ROS_DISTRO-catkin
  - source /opt/ros/$ROS_DISTRO/setup.bash
  # Prepare rosdep to install dependencies.
  - sudo rosdep init
  - rosdep update

# Create a catkin workspace with the package under integration.
>>>>>>> Travis build first integration test.
install:
  # Acquire the essential parts of the LeapSDK
  - cd $CI_SOURCE_PATH/config/Travis
  - 'if [ "$TRAVIS_PULL_REQUEST" = "false" ]; then
      echo TRAVIS_PULL_REQUEST is False;
      git clone $SDK_LOC ~;
    else
      echo TRAVIS_PULL_REQUEST is True;
      mkdir -p ~/leap/include;
      mkdir -p ~/leap/lib/x64;
      wget -q -i $CI_SOURCE_PATH/config/Travis/$INCLUDE_URL_FILENAME -P ~/leap/include/;
      wget -q -i $CI_SOURCE_PATH/config/Travis/$LIB_URL_FILENAME -P ~/leap/lib/x64;
    fi'

  # Make a catkins_ws
  - mkdir -p ~/catkin_ws/src
  - cd ~/catkin_ws/src
  - catkin_init_workspace
  # Create the devel/setup.bash (run catkin_make with an empty workspace) and
  # source it to set the path variables.
  - cd ~/catkin_ws
  - catkin_make
  - source devel/setup.bash
  # Add the package under integration to the workspace using a symlink.
  - cd ~/catkin_ws/src
  - ln -s $CI_SOURCE_PATH .

# Install all dependencies, using wstool first and rosdep second.
# wstool looks for a ROSINSTALL_FILE defined in the environment variables.
before_script:
  # source dependencies: install using wstool.
  - cd ~/catkin_ws/src
  - wstool init
  - if [[ -f $ROSINSTALL_FILE ]] ; then wstool merge $ROSINSTALL_FILE ; fi
  - wstool up
  # package depdencies: install using rosdep.
  - cd ~/catkin_ws
  - rosdep install -y --from-paths src --ignore-src --rosdistro $ROS_DISTRO

# Compile and test (mark the build as failed if any step fails). If the
# CATKIN_OPTIONS file exists, use it as an argument to catkin_make, for example
# to blacklist certain packages.
#
# NOTE on testing: `catkin_make run_tests` will show the output of the tests
# (gtest, nosetest, etc..) but always returns 0 (success) even if a test
# fails. Running `catkin_test_results` aggregates all the results and returns
# non-zero when a test fails (which notifies Travis the build failed).
script:
  - source /opt/ros/$ROS_DISTRO/setup.bash
  - cd ~/catkin_ws
  - catkin_make $( [ -f $CATKIN_OPTIONS ] && cat $CATKIN_OPTIONS )
  # Run the tests, ensuring the path is set correctly.
#  - source devel/setup.bash
#  - catkin_make run_tests && catkin_test_results